diff --git a/kernel/kernel.c b/kernel/kernel.c
index b8b17cd..6a3faa0 100644
--- a/kernel/kernel.c
+++ b/kernel/kernel.c
@@ -7,12 +7,17 @@
  ***********************************************************************
  */
 
+#include <stdbool.h>
+
+#include "kernel.h"
 #include "isr.h"
 #include "vga.h"
 #include "helper.h"
 #include "io.h"
 #include "shell.h"
 
+volatile bool _login_active;
+
 /* Entry point for kernel.
  */
 void kernel_main(void)
@@ -23,26 +28,27 @@ void kernel_main(void)
 	irq_install();
 
 	// Display welcome message to user and prompt.
-	kprintf("Welcome to my bare bones example 32 bit operating system.\n");
-	kprintf("\n  I have designed this because I would like to teach beginners\n");
-	kprintf("the proper way of doing things. As far as a beginning operating\n");
-	kprintf("system goes. Please feel free to clone and use it. If you are\n");
-	kprintf("are wondering about what license. It has an MIT license so\n");
-	kprintf("basically don't say you wrote it and you'll be fine. Other than\n");
-	kprintf("that, you can use it for whatever you want. Also this software\n");
-	kprintf("comes WITHOUT ANY WARRANTY of any kind. I will not be held\n");
-	kprintf("accountable for any damage this software may cause. Please use\n");
-	kprintf("it at your own risk.\n\n");
-	kprintf("Cheers,\nPhilip R. Simonson (aka 5n4k3)\n\n");
-	kprintf("Welcome to a bare bones kernel! This is a temporary shell.\n");
-	kprintf("Please type 'help' to see what you can do.\n\n> ");
+	_login_active = true;
+	kprintf(WELCOME_MESSAGE);
 }
 /* Kernel process user input.
  */
 void user_input(char *input)
 {
-	process_command(input);
-	kprintf("> ");
+	if(_login_active) {
+		if(!strcmp("root071", input)) {
+			_login_active = false;
+			kprintf("Welcome to a basic shell, please type 'help' in order\n"
+				"to see a list of commands. Have fun :D\n\n> ");
+		} else {
+			kprintf("Invalid password!\nLOGIN? ");
+			_login_active = true;
+		}
+	} else {
+		process_command(input);
+		if(!_login_active) kprintf("> ");
+		else kprintf("LOGIN? ");
+	}
 }
 /* Start of operating system.
  */
diff --git a/kernel/kernel.h b/kernel/kernel.h
index 8eef587..3e64a72 100644
--- a/kernel/kernel.h
+++ b/kernel/kernel.h
@@ -10,7 +10,18 @@
 #ifndef _KERNEL_H_
 #define _KERNEL_H_
 
-/* Get user input and process it. */
-void user_input(char *input);
+#define WELCOME_MESSAGE \
+	"Welcome to my bare bones example 32 bit operating system.\n" \
+	"\n  I have designed this because I would like to teach beginners\n" \
+	"the proper way of doing things. As far as a beginning operating\n" \
+	"system goes. Please feel free to clone and use it. If you are\n" \
+	"are wondering about what license. It has an MIT license so\n" \
+	"basically don't say you wrote it and you'll be fine. Other than\n" \
+	"that, you can use it for whatever you want. Also this software\n" \
+	"comes WITHOUT ANY WARRANTY of any kind. I will not be held\n" \
+	"accountable for any damage this software may cause. Please use\n" \
+	"it at your own risk.\n\n" \
+	"Cheers,\nPhilip R. Simonson (aka 5n4k3)\n\n" \
+	"Welcome to a bare bones kernel! Please login to the console.\n\nLOGIN? "
 
 #endif
diff --git a/kernel/shell.c b/kernel/shell.c
index 66741d2..ac09c99 100644
--- a/kernel/shell.c
+++ b/kernel/shell.c
@@ -7,6 +7,8 @@
  *********************************************************************
  */
 
+#include <stdbool.h>
+
 #include "vga.h"
 #include "helper.h"
 #include "io.h"
@@ -37,6 +39,7 @@ typedef struct command {
 DEF_FNC(clear);
 DEF_FNC(regs);
 DEF_FNC(help);
+DEF_FNC(logout);
 DEF_FNC(exit);
 
 /* ----------------------------- Commands -------------------------- */
@@ -45,6 +48,7 @@ BEG_CMD
 ADD_CMD(clear, "Clear the VGA screen buffer."),
 ADD_CMD(regs, "Display register values."),
 ADD_CMD(help, "Display this help text."),
+ADD_CMD(logout, "Log off and return to login screen."),
 ADD_CMD(exit, "Halt execution of CPU.")
 END_CMD
 CNT_CMD
@@ -74,6 +78,13 @@ DEF_FNC(help) {
 	for(int i = 0; i < cmd_total; i++)
 		kprintf("%s - %s\n", commands[i].cmd, commands[i].help);
 }
+/* Logout command, log off system.
+ */
+DEF_FNC(logout) {
+	extern volatile bool _login_active;
+	_login_active = true;
+	kprintf("Logging out...\n");
+}
 /* Exit command, halt CPU.
  */
 DEF_FNC(exit) {
